const encryptedCode = '// Konfigurasi Firebase (sesuaikan dengan proyek Firebase Anda)
        var firebaseConfig = {
            apiKey: "AIzaSyBiyeOwbQeWmyL61MrCQS4SjElACqB6K8E",
            authDomain: "anonymouscode.firebaseapp.com",
            projectId: "anonymouscode",
            storageBucket: "anonymouscode.appspot.com",
            messagingSenderId: "170486176466",
            appId: "1:170486176466:web:c139185c3bed507456ab0b"
        };

        // Inisialisasi Firebase
        firebase.initializeApp(firebaseConfig);

        // Inisialisasi Firebase Storage
        var storage = firebase.storage();
        var storageRef = storage.ref();

        // Inisialisasi Firebase Realtime Database
        var database = firebase.database();
        var filesRef = database.ref('html-files');

        // Inisialisasi array untuk menyimpan data file
        var filesData = [];

        // Fungsi untuk mendapatkan tanggal terakhir kali dimodifikasi dari Firebase Storage
        function getLastModified(fileName) {
            return storageRef.child('html-files/' + fileName).getMetadata().then(function (metadata) {
                return new Date(metadata.updated);
            });
        }

        // Fungsi untuk menampilkan file dalam tabel
        function displayFilesInTable(filesData) {
            var table = document.getElementById('file-table');
            // Kosongkan tabel sebelum menambahkan data baru
            table.innerHTML = '';

            // Tambahkan judul kolom
            var thead = table.createTHead();
            var row = thead.insertRow();
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            var cell3 = row.insertCell(2);
            var cell4 = row.insertCell(3);
            var cell5 = row.insertCell(4);
            cell1.innerHTML = '<b>File Name</b>';
            cell2.innerHTML = '<b>Size</b>';
            cell3.innerHTML = '<b>Link</b>';
            cell4.innerHTML = '<b>Views</b>';
            cell5.innerHTML = '<b>Update</b>';

            // Tambahkan data file ke dalam tabel
            filesData.forEach(function (fileData) {
                addFileToTable(fileData.name, fileData.url, fileData.size, fileData.views, fileData.lastModified);
            });
        }

        // Variabel untuk mengatur jumlah file yang akan ditampilkan per halaman
        const filesPerPage = 15;
        var currentPage = 1;

        // Fungsi untuk menampilkan file dalam tabel sesuai dengan halaman yang ditampilkan
        function displayFilesPerPage(filesData, page) {
            var startIndex = (page - 1) * filesPerPage;
            var endIndex = Math.min(startIndex + filesPerPage, filesData.length);
            var filesToShow = filesData.slice(startIndex, endIndex);
            displayFilesInTable(filesToShow);
        }

        // Panggil fungsi displayFilesPerPage dengan halaman pertama saat halaman dimuat
        window.onload = function () {
            // Dapatkan daftar file dari Firebase Realtime Database dan urutkan berdasarkan views secara descending
            filesRef.orderByChild('views').on('value', function (snapshot) {
                // Reset data file sebelum menambahkannya kembali
                filesData = [];

                // Iterate melalui setiap file dari Firebase Realtime Database
                snapshot.forEach(function (childSnapshot) {
                    var fileData = childSnapshot.val();
                    var fileName = fileData.name;
                    var fileURL = fileData.url;
                    var fileSize = fileData.size;
                    var views = fileData.views || 0;

                    // Dapatkan tanggal terakhir kali dimodifikasi dari Firebase Storage
                    getLastModified(fileName).then(function (lastModified) {
                        // Format tanggal terakhir kali dimodifikasi
                        var formattedLastModified = lastModified.toLocaleDateString(undefined, {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            timeZoneName: 'short'
                        });

                        // Tambahkan informasi file ke dalam array
                        filesData.push({
                            name: fileName,
                            url: fileURL,
                            size: fileSize,
                            views: views,
                            lastModified: formattedLastModified
                        });

                        // Urutkan filesData berdasarkan views secara descending
                        filesData.sort(function (a, b) {
                            return b.views - a.views;
                        });

                        // Tampilkan file dalam tabel setelah pengurutan
                        displayFilesPerPage(filesData, currentPage); // Tampilkan halaman pertama
                    });
                });
            });
        };

        // Fungsi untuk menambahkan informasi file ke dalam tabel
        function addFileToTable(fileName, fileURL, fileSize, views, lastModified) {
            var table = document.getElementById('file-table');
            var newRow = table.insertRow();
            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);
            var cell4 = newRow.insertCell(3);
            var cell5 = newRow.insertCell(4);

            cell1.innerHTML = fileName;
            cell2.innerHTML = fileSize;
            var link = document.createElement('a');
            link.href = fileURL;
            link.target = '_blank';
            link.textContent = 'Open';
            cell3.appendChild(link);
            cell4.innerHTML = views;

            // Tampilkan tanggal terakhir kali dimodifikasi
            cell5.innerHTML = lastModified;

            // Tambahkan event listener untuk menghitung jumlah klik
            link.addEventListener('click', function (event) {
                event.preventDefault();
                var clickedFileName = fileName;

                filesRef.orderByChild('name').equalTo(clickedFileName).once('value', function (snapshot) {
                    if (snapshot.exists()) {
                        var fileKey = Object.keys(snapshot.val())[0];
                        var viewCount = (snapshot.val()[fileKey].views || 0) + 1;

                        // Simpan jumlah views yang telah ditingkatkan kembali ke Firebase Realtime Database
                        filesRef.child(fileKey).update({
                            views: viewCount
                        }).then(function () {
                            // Perbarui tampilan jumlah views
                            cell4.textContent = viewCount;

                            // Refresh halaman saat jumlah views telah diperbarui
                            setTimeout(function () {
                                window.open(link.href, '_blank'); // Buka tautan dalam tab baru
                                location.reload(); // Reload halaman
                            }, 1000);
                        }).catch(function (error) {
                            console.error('Error updating views:', error);
                        });
                    }
                });
            });
        }

        // Tombol next
        document.getElementById('nextPage').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage * filesPerPage < filesData.length) {
                currentPage++;
                updateJumpPageInput();
                displayFilesPerPage(filesData, currentPage);
            }
        });

        // Tombol prev
        document.getElementById('prevPage').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                updateJumpPageInput();
                displayFilesPerPage(filesData, currentPage);
            }
        });

        // Tombol jump next
        document.getElementById('jumpNextPage').addEventListener('click', function(e) {
            e.preventDefault();
            currentPage = Math.ceil(filesData.length / filesPerPage);
            displayFilesPerPage(filesData, currentPage);
            updateJumpPageInput();
        });

        // Tombol jump prev
        document.getElementById('jumpPrevPage').addEventListener('click', function(e) {
            e.preventDefault();
            currentPage = 1;
            displayFilesPerPage(filesData, currentPage);
            updateJumpPageInput();
        });

        // Tombol next 2
        document.getElementById('nextPage2').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage * filesPerPage < filesData.length) {
                currentPage++;
                updateJumpPageInput();
                displayFilesPerPage(filesData, currentPage);
            }
        });

        // Tombol prev 2
        document.getElementById('prevPage2').addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                updateJumpPageInput();
                displayFilesPerPage(filesData, currentPage);
            }
        });

        // Tombol jump next 2
        document.getElementById('jumpNextPage2').addEventListener('click', function(e) {
            e.preventDefault();
            currentPage = Math.ceil(filesData.length / filesPerPage);
            displayFilesPerPage(filesData, currentPage);
            updateJumpPageInput();
        });

        // Tombol jump prev 2
        document.getElementById('jumpPrevPage2').addEventListener('click', function(e) {
            e.preventDefault();
            currentPage = 1;
            displayFilesPerPage(filesData, currentPage);
            updateJumpPageInput();
        });

        // Fungsi untuk menampilkan notifikasi
        function showNotification(message) {
            var notification = document.getElementById('notification');
            var notificationMessage = document.getElementById('notification-message');
            var notificationButton = document.getElementById('notification-button');
            notificationMessage.innerText = message;
            notification.style.display = 'block';

            notificationButton.addEventListener('click', function () {
                notification.style.display = 'none';
            });
        }

        // Tampilkan animasi loading
        function showLoadingAnimation() {
            var loadingAnimation = document.getElementById('loading-animation');
            loadingAnimation.style.display = 'block';

            // Reset nilai persentase
            currentProgress = 0;
            var loadingPercent = document.querySelector('.loading-percent');
            loadingPercent.innerText = '0%';

            // Jalankan fungsi updateProgress setiap 40ms untuk mengupdate persentase
            var intervalId = setInterval(updateProgress, 40);

            // Fungsi untuk mengupdate persentase
            function updateProgress() {
                currentProgress += 1;
                if (currentProgress <= 100) {
                    loadingPercent.innerText = currentProgress + '%';
                } else {
                    clearInterval(intervalId);
                }
            }
        }

        // Sembunyikan animasi loading
        function hideLoadingAnimation() {
            var loadingAnimation = document.getElementById('loading-animation');
            loadingAnimation.style.display = 'none';
        }

        // Fungsi untuk mengukur ukuran file
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';

            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

            const i = Math.floor(Math.log(bytes) / Math.log(k));

            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Fungsi untuk memperbarui nilai input jumpage
        function updateJumpPageInput() {
            document.getElementById('jumpage').value = currentPage;
            document.getElementById('jumpage2').value = currentPage;
        }

        // Tambahkan event listener untuk input jumpage
        document.getElementById('jumpage').addEventListener('input', function() {
            var jumpPageInput = parseInt(this.value);
            if (!isNaN(jumpPageInput) && jumpPageInput >= 1 && jumpPageInput <= Math.ceil(filesData.length / filesPerPage)) {
                currentPage = jumpPageInput;
                displayFilesPerPage(filesData, currentPage);
                updateJumpPageInput(); // Perbarui juga input pada bagian bawah
            }
        });

        // Tambahkan event listener untuk input jumpage2
        document.getElementById('jumpage2').addEventListener('input', function() {
            var jumpPageInput = parseInt(this.value);
            if (!isNaN(jumpPageInput) && jumpPageInput >= 1 && jumpPageInput <= Math.ceil(filesData.length / filesPerPage)) {
                currentPage = jumpPageInput;
                displayFilesPerPage(filesData, currentPage);
                updateJumpPageInput(); // Perbarui juga input pada bagian atas
            }
        });

// Tambahkan event listener untuk form pencarian
document.getElementById('idjs').addEventListener('submit', function(event) {
    event.preventDefault(); // Mencegah pengiriman form secara default

    // Dapatkan nilai input pencarian
    var searchTerm = document.getElementById('inputanjs').value.toLowerCase();

    // Filter data file berdasarkan nama file yang cocok dengan input pencarian
    var filteredFilesData = filesData.filter(function(file) {
        return file.name.toLowerCase().includes(searchTerm);
    });

    // Tampilkan file yang sudah difilter dalam tabel
    displayFilesPerPage(filteredFilesData, 1); // Menampilkan halaman pertama dari hasil pencarian
    currentPage = 1; // Set halaman saat ini kembali ke halaman pertama
    updateJumpPageInput(); // Perbarui input jumpage

    // Perbarui keterangan nama yang dicari
    document.getElementById('search-info').textContent = 'Search for: ' + searchTerm;

    // Sembunyikan form pencarian
    document.getElementById('search').style.display = 'true';
});

// Tambahkan event listener untuk tombol navigasi (next, prev, dll.) di bagian atas
document.getElementById('nextPage').addEventListener('click', handleNavigationButtonClick);
document.getElementById('prevPage').addEventListener('click', handleNavigationButtonClick);
document.getElementById('jumpNextPage').addEventListener('click', handleNavigationButtonClick);
document.getElementById('jumpPrevPage').addEventListener('click', handleNavigationButtonClick);

// Tambahkan event listener untuk tombol navigasi (next, prev, dll.) di bagian bawah
document.getElementById('nextPage2').addEventListener('click', handleNavigationButtonClick);
document.getElementById('prevPage2').addEventListener('click', handleNavigationButtonClick);
document.getElementById('jumpNextPage2').addEventListener('click', handleNavigationButtonClick);
document.getElementById('jumpPrevPage2').addEventListener('click', handleNavigationButtonClick);

// Fungsi event listener untuk semua tombol navigasi
function handleNavigationButtonClick(e) {
    // Perbarui halaman dan sembunyikan keterangan pencarian
    updateJumpPageInput();
    displayFilesPerPage(filesData, currentPage);
    hideSearchInfo(); // Sembunyikan keterangan pencarian
}

// Tambahkan fungsi untuk menyembunyikan keterangan pencarian
function hideSearchInfo() {
    document.getElementById('search-info').textContent = ''; // Kosongkan keterangan pencarian
}

const npsearch = document.querySelector('.fokusearch');
if (npsearch) {
    npsearch.onclick = function() {
        setTimeout(function() {
            document.querySelector('.inputsearch').focus();
        }, 50);
    };
}

document.getElementById('upload-form').addEventListener('submit', function(event) {
    event.preventDefault(); // Mencegah pengiriman form secara default

    var fileInput = document.getElementById('html-file').files[0];
    var fileName = fileInput.name;
    var fileRef = storageRef.child('html-files/' + fileName);

    // Tampilkan animasi loading
    showLoadingAnimation();

    // Upload file ke Firebase Storage
    fileRef.put(fileInput).then(function(snapshot) {
        // Dapatkan URL download file yang diunggah
        snapshot.ref.getDownloadURL().then(function(downloadURL) {
            // Simpan informasi file ke Firebase Realtime Database
            filesRef.push({
                name: fileName,
                url: downloadURL,
                size: formatBytes(fileInput.size),
                views: 0, // Set views awal ke 0
                lastModified: new Date().toLocaleString() // Tanggal terakhir kali dimodifikasi
            }).then(function() {
                // Sembunyikan animasi loading setelah pengunggahan selesai
                hideLoadingAnimation();

                // Tampilkan notifikasi pengunggahan berhasil
                showNotification('File uploaded successfully!');

                // Reset nilai input file
                document.getElementById('html-file').value = '';

                // Refresh halaman untuk menampilkan file yang baru diunggah
                location.reload();
            }).catch(function(error) {
                // Sembunyikan animasi loading jika terjadi kesalahan
                hideLoadingAnimation();

                console.error('Error saving file info:', error);
                showNotification('Error saving file info. Please try again.');
            });
        });
    }).catch(function(error) {
        // Sembunyikan animasi loading jika terjadi kesalahan
        hideLoadingAnimation();

        console.error('Error uploading file:', error);
        showNotification('Error uploading file. Please try again.');
    });
});
// Fungsi untuk menampilkan notifikasi
function showNotification(message) {
    // Anda dapat menggunakan cara tertentu untuk menampilkan notifikasi,
    // misalnya dengan menggunakan alert atau menampilkan pesan di elemen HTML
    // Di sini, saya akan menggunakan alert untuk tujuan demonstrasi
    alert(message);
}

// Memilih elemen form
var uploadForm = document.getElementById('upload-form');

// Menambahkan event listener untuk form submit
uploadForm.addEventListener('submit', function(event) {
    event.preventDefault(); // Mencegah pengiriman form secara default

    var fileInput = document.getElementById('html-file').files[0];

    // Jika tidak ada file yang dipilih
    if (!fileInput) {
        // Tampilkan notifikasi kepada pengguna
        showNotification('Please select a file to upload!');
        return; // Hentikan eksekusi fungsi
    }

    var fileName = fileInput.name;
    var fileRef = storageRef.child('html-files/' + fileName);

    // Tampilkan animasi loading
    showLoadingAnimation();

    // Upload file ke Firebase Storage
    fileRef.put(fileInput).then(function(snapshot) {
        // Dapatkan URL download file yang diunggah
        snapshot.ref.getDownloadURL().then(function(downloadURL) {
            // Simpan informasi file ke Firebase Realtime Database
            filesRef.push({
                name: fileName,
                url: downloadURL,
                size: formatBytes(fileInput.size),
                views: 0, // Set views awal ke 0
                lastModified: new Date().toLocaleString() // Tanggal terakhir kali dimodifikasi
            }).then(function() {
                // Sembunyikan animasi loading setelah pengunggahan selesai
                hideLoadingAnimation();

                // Tampilkan notifikasi pengunggahan berhasil
                showNotification('File uploaded successfully!');

                // Reset nilai input file
                document.getElementById('html-file').value = '';

                // Refresh halaman untuk menampilkan file yang baru diunggah
                location.reload();
            }).catch(function(error) {
                // Sembunyikan animasi loading jika terjadi kesalahan
                hideLoadingAnimation();

                console.error('Error saving file info:', error);
                showNotification('Error saving file info. Please try again.');
            });
        });
    }).catch(function(error) {
        // Sembunyikan animasi loading jika terjadi kesalahan
        hideLoadingAnimation();

        console.error('Error uploading file:', error);
        showNotification('Error uploading file. Please try again.');
    });
});
const targetDomain = 'haxoruploader.blogspot.com';
function createAlertBox(message) {
  const alertBox = document.createElement('div');
  alertBox.setAttribute('id', 'alertBox');
  alertBox.style.position = 'fixed';
  alertBox.style.top = '50px';
  alertBox.style.left = '50%';
  alertBox.style.transform = 'translateX(-50%)';
  alertBox.style.backgroundColor = '#f2f2f2';
  alertBox.style.border = '1px solid #ddd';
  alertBox.style.borderRadius = '5px';
  alertBox.style.padding = '20px';
  alertBox.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
  alertBox.style.zIndex = '9999';
  alertBox.innerHTML = `<strong>PERINGATAN!</strong> ${message}`;
  document.body.appendChild(alertBox);

  setTimeout(() => {
    document.body.removeChild(alertBox);
    window.location.href = 'https://haxoruploader.blogspot.com';
  }, 10000);
}

const currentDomain = window.location.hostname;

if (currentDomain !== targetDomain) {
  createAlertBox('Sumber Daya Ini Diamankan Oleh Ahli Keamanan. Dilarang Mengakses Tanpa Izin.');
}
';

function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}

runDecryptedCode(encryptedCode);
