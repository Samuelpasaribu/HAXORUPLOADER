const encryptedCode = 'Ly8gS29uZmlndXJhc2kgRmlyZWJhc2UgKHNlc3VhaWthbiBkZW5nYW4gcHJveWVrIEZpcmViYXNlIEFuZGEpCnZhciBmaXJlYmFzZUNvbmZpZyA9IHsKICAgIGFwaUtleTogIkFJemFTeUJpeWVPd2JRZVdteUw2MU1yQ1FTNFNqRWxBQ3FCNks4RSIsCiAgICBhdXRoRG9tYWluOiAiYW5vbnltb3VzY29kZS5maXJlYmFzZWFwcC5jb20iLAogICAgcHJvamVjdElkOiAiYW5vbnltb3VzY29kZSIsCiAgICBzdG9yYWdlQnVja2V0OiAiYW5vbnltb3VzY29kZS5hcHBzcG90LmNvbSIsCiAgICBtZXNzYWdpbmdTZW5kZXJJZDogIjE3MDQ4NjE3NjQ2NiIsCiAgICBhcHBJZDogIjE6MTcwNDg2MTc2NDY2OndlYjpjMTM5MTg1YzNiZWQ1MDc0NTZhYjBiIgp9OwoKLy8gSW5pc2lhbGlzYXNpIEZpcmViYXNlCmZpcmViYXNlLmluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpOwoKLy8gSW5pc2lhbGlzYXNpIEZpcmViYXNlIFN0b3JhZ2UKdmFyIHN0b3JhZ2UgPSBmaXJlYmFzZS5zdG9yYWdlKCk7CnZhciBzdG9yYWdlUmVmID0gc3RvcmFnZS5yZWYoKTsKCi8vIEluaXNpYWxpc2FzaSBGaXJlYmFzZSBSZWFsdGltZSBEYXRhYmFzZQp2YXIgZGF0YWJhc2UgPSBmaXJlYmFzZS5kYXRhYmFzZSgpOwp2YXIgZmlsZXNSZWYgPSBkYXRhYmFzZS5yZWYoJ2h0bWwtZmlsZXMnKTsKCi8vIEluaXNpYWxpc2FzaSBhcnJheSB1bnR1ayBtZW55aW1wYW4gZGF0YSBmaWxlCnZhciBmaWxlc0RhdGEgPSBbXTsKCi8vIEZ1bmdzaSB1bnR1ayBtZW5kYXBhdGthbiB0YW5nZ2FsIHRlcmFraGlyIGthbGkgZGltb2RpZmlrYXNpIGRhcmkgRmlyZWJhc2UgU3RvcmFnZQpmdW5jdGlvbiBnZXRMYXN0TW9kaWZpZWQoZmlsZU5hbWUpIHsKICAgIHJldHVybiBzdG9yYWdlUmVmLmNoaWxkKCdodG1sLWZpbGVzLycgKyBmaWxlTmFtZSkuZ2V0TWV0YWRhdGEoKS50aGVuKGZ1bmN0aW9uIChtZXRhZGF0YSkgewogICAgICAgIHJldHVybiBuZXcgRGF0ZShtZXRhZGF0YS51cGRhdGVkKTsKICAgIH0pOwp9CgovLyBGdW5nc2kgdW50dWsgbWVuYW1waWxrYW4gZmlsZSBkYWxhbSB0YWJlbApmdW5jdGlvbiBkaXNwbGF5RmlsZXNJblRhYmxlKGZpbGVzRGF0YSkgewogICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtdGFibGUnKTsKICAgIC8vIEtvc29uZ2thbiB0YWJlbCBzZWJlbHVtIG1lbmFtYmFoa2FuIGRhdGEgYmFydQogICAgdGFibGUuaW5uZXJIVE1MID0gJyc7CgogICAgLy8gVGFtYmFoa2FuIGp1ZHVsIGtvbG9tCiAgICB2YXIgdGhlYWQgPSB0YWJsZS5jcmVhdGVUSGVhZCgpOwogICAgdmFyIHJvdyA9IHRoZWFkLmluc2VydFJvdygpOwogICAgdmFyIGNlbGwxID0gcm93Lmluc2VydENlbGwoMCk7CiAgICB2YXIgY2VsbDIgPSByb3cuaW5zZXJ0Q2VsbCgxKTsKICAgIHZhciBjZWxsMyA9IHJvdy5pbnNlcnRDZWxsKDIpOwogICAgdmFyIGNlbGw0ID0gcm93Lmluc2VydENlbGwoMyk7CiAgICB2YXIgY2VsbDUgPSByb3cuaW5zZXJ0Q2VsbCg0KTsKICAgIGNlbGwxLmlubmVySFRNTCA9ICc8Yj5GaWxlIE5hbWU8L2I+JzsKICAgIGNlbGwyLmlubmVySFRNTCA9ICc8Yj5TaXplPC9iPic7CiAgICBjZWxsMy5pbm5lckhUTUwgPSAnPGI+TGluazwvYj4nOwogICAgY2VsbDQuaW5uZXJIVE1MID0gJzxiPlZpZXdzPC9iPic7CiAgICBjZWxsNS5pbm5lckhUTUwgPSAnPGI+VXBkYXRlPC9iPic7CgogICAgLy8gVGFtYmFoa2FuIGRhdGEgZmlsZSBrZSBkYWxhbSB0YWJlbAogICAgZmlsZXNEYXRhLmZvckVhY2goZnVuY3Rpb24gKGZpbGVEYXRhKSB7CiAgICAgICAgYWRkRmlsZVRvVGFibGUoZmlsZURhdGEubmFtZSwgZmlsZURhdGEudXJsLCBmaWxlRGF0YS5zaXplLCBmaWxlRGF0YS52aWV3cywgZmlsZURhdGEubGFzdE1vZGlmaWVkKTsKICAgIH0pOwp9CgovLyBWYXJpYWJlbCB1bnR1ayBtZW5nYXR1ciBqdW1sYWggZmlsZSB5YW5nIGFrYW4gZGl0YW1waWxrYW4gcGVyIGhhbGFtYW4KY29uc3QgZmlsZXNQZXJQYWdlID0gMTU7CnZhciBjdXJyZW50UGFnZSA9IDE7CgovLyBGdW5nc2kgdW50dWsgbWVuYW1waWxrYW4gZmlsZSBkYWxhbSB0YWJlbCBzZXN1YWkgZGVuZ2FuIGhhbGFtYW4geWFuZyBkaXRhbXBpbGthbgpmdW5jdGlvbiBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgcGFnZSkgewogICAgdmFyIHN0YXJ0SW5kZXggPSAocGFnZSAtIDEpICogZmlsZXNQZXJQYWdlOwogICAgdmFyIGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIGZpbGVzUGVyUGFnZSwgZmlsZXNEYXRhLmxlbmd0aCk7CiAgICB2YXIgZmlsZXNUb1Nob3cgPSBmaWxlc0RhdGEuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpOwogICAgZGlzcGxheUZpbGVzSW5UYWJsZShmaWxlc1RvU2hvdyk7Cn0KCi8vIFBhbmdnaWwgZnVuZ3NpIGRpc3BsYXlGaWxlc1BlclBhZ2UgZGVuZ2FuIGhhbGFtYW4gcGVydGFtYSBzYWF0IGhhbGFtYW4gZGltdWF0CndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAvLyBEYXBhdGthbiBkYWZ0YXIgZmlsZSBkYXJpIEZpcmViYXNlIFJlYWx0aW1lIERhdGFiYXNlIGRhbiB1cnV0a2FuIGJlcmRhc2Fya2FuIHZpZXdzIHNlY2FyYSBkZXNjZW5kaW5nCiAgICBmaWxlc1JlZi5vcmRlckJ5Q2hpbGQoJ3ZpZXdzJykub24oJ3ZhbHVlJywgZnVuY3Rpb24gKHNuYXBzaG90KSB7CiAgICAgICAgLy8gUmVzZXQgZGF0YSBmaWxlIHNlYmVsdW0gbWVuYW1iYWhrYW5ueWEga2VtYmFsaQogICAgICAgIGZpbGVzRGF0YSA9IFtdOwoKICAgICAgICAvLyBJdGVyYXRlIG1lbGFsdWkgc2V0aWFwIGZpbGUgZGFyaSBGaXJlYmFzZSBSZWFsdGltZSBEYXRhYmFzZQogICAgICAgIHNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24gKGNoaWxkU25hcHNob3QpIHsKICAgICAgICAgICAgdmFyIGZpbGVEYXRhID0gY2hpbGRTbmFwc2hvdC52YWwoKTsKICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gZmlsZURhdGEubmFtZTsKICAgICAgICAgICAgdmFyIGZpbGVVUkwgPSBmaWxlRGF0YS51cmw7CiAgICAgICAgICAgIHZhciBmaWxlU2l6ZSA9IGZpbGVEYXRhLnNpemU7CiAgICAgICAgICAgIHZhciB2aWV3cyA9IGZpbGVEYXRhLnZpZXdzIHx8IDA7CgogICAgICAgICAgICAvLyBEYXBhdGthbiB0YW5nZ2FsIHRlcmFraGlyIGthbGkgZGltb2RpZmlrYXNpIGRhcmkgRmlyZWJhc2UgU3RvcmFnZQogICAgICAgICAgICBnZXRMYXN0TW9kaWZpZWQoZmlsZU5hbWUpLnRoZW4oZnVuY3Rpb24gKGxhc3RNb2RpZmllZCkgewogICAgICAgICAgICAgICAgLy8gRm9ybWF0IHRhbmdnYWwgdGVyYWtoaXIga2FsaSBkaW1vZGlmaWthc2kKICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRMYXN0TW9kaWZpZWQgPSBsYXN0TW9kaWZpZWQudG9Mb2NhbGVEYXRlU3RyaW5nKHVuZGVmaW5lZCwgewogICAgICAgICAgICAgICAgICAgIHllYXI6ICdudW1lcmljJywKICAgICAgICAgICAgICAgICAgICBtb250aDogJ2xvbmcnLAogICAgICAgICAgICAgICAgICAgIGRheTogJ251bWVyaWMnLAogICAgICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZU5hbWU6ICdzaG9ydCcKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIFRhbWJhaGthbiBpbmZvcm1hc2kgZmlsZSBrZSBkYWxhbSBhcnJheQogICAgICAgICAgICAgICAgZmlsZXNEYXRhLnB1c2goewogICAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLAogICAgICAgICAgICAgICAgICAgIHVybDogZmlsZVVSTCwKICAgICAgICAgICAgICAgICAgICBzaXplOiBmaWxlU2l6ZSwKICAgICAgICAgICAgICAgICAgICB2aWV3czogdmlld3MsCiAgICAgICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiBmb3JtYXR0ZWRMYXN0TW9kaWZpZWQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIFVydXRrYW4gZmlsZXNEYXRhIGJlcmRhc2Fya2FuIHZpZXdzIHNlY2FyYSBkZXNjZW5kaW5nCiAgICAgICAgICAgICAgICBmaWxlc0RhdGEuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBiLnZpZXdzIC0gYS52aWV3czsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIFRhbXBpbGthbiBmaWxlIGRhbGFtIHRhYmVsIHNldGVsYWggcGVuZ3VydXRhbgogICAgICAgICAgICAgICAgZGlzcGxheUZpbGVzUGVyUGFnZShmaWxlc0RhdGEsIGN1cnJlbnRQYWdlKTsgLy8gVGFtcGlsa2FuIGhhbGFtYW4gcGVydGFtYQogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0pOwp9OwoKLy8gRnVuZ3NpIHVudHVrIG1lbmFtYmFoa2FuIGluZm9ybWFzaSBmaWxlIGtlIGRhbGFtIHRhYmVsCmZ1bmN0aW9uIGFkZEZpbGVUb1RhYmxlKGZpbGVOYW1lLCBmaWxlVVJMLCBmaWxlU2l6ZSwgdmlld3MsIGxhc3RNb2RpZmllZCkgewogICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtdGFibGUnKTsKICAgIHZhciBuZXdSb3cgPSB0YWJsZS5pbnNlcnRSb3coKTsKICAgIHZhciBjZWxsMSA9IG5ld1Jvdy5pbnNlcnRDZWxsKDApOwogICAgdmFyIGNlbGwyID0gbmV3Um93Lmluc2VydENlbGwoMSk7CiAgICB2YXIgY2VsbDMgPSBuZXdSb3cuaW5zZXJ0Q2VsbCgyKTsKICAgIHZhciBjZWxsNCA9IG5ld1Jvdy5pbnNlcnRDZWxsKDMpOwogICAgdmFyIGNlbGw1ID0gbmV3Um93Lmluc2VydENlbGwoNCk7CgogICAgY2VsbDEuaW5uZXJIVE1MID0gZmlsZU5hbWU7CiAgICBjZWxsMi5pbm5lckhUTUwgPSBmaWxlU2l6ZTsKICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgbGluay5ocmVmID0gZmlsZVVSTDsKICAgIGxpbmsudGFyZ2V0ID0gJ19ibGFuayc7CiAgICBsaW5rLnRleHRDb250ZW50ID0gJ09wZW4nOwogICAgY2VsbDMuYXBwZW5kQ2hpbGQobGluayk7CiAgICBjZWxsNC5pbm5lckhUTUwgPSB2aWV3czsKCiAgICAvLyBUYW1waWxrYW4gdGFuZ2dhbCB0ZXJha2hpciBrYWxpIGRpbW9kaWZpa2FzaQogICAgY2VsbDUuaW5uZXJIVE1MID0gbGFzdE1vZGlmaWVkOwoKICAgIC8vIFRhbWJhaGthbiBldmVudCBsaXN0ZW5lciB1bnR1ayBtZW5naGl0dW5nIGp1bWxhaCBrbGlrCiAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2YXIgY2xpY2tlZEZpbGVOYW1lID0gZmlsZU5hbWU7CgogICAgICAgIGZpbGVzUmVmLm9yZGVyQnlDaGlsZCgnbmFtZScpLmVxdWFsVG8oY2xpY2tlZEZpbGVOYW1lKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICAgICAgICBpZiAoc25hcHNob3QuZXhpc3RzKCkpIHsKICAgICAgICAgICAgICAgIHZhciBmaWxlS2V5ID0gT2JqZWN0LmtleXMoc25hcHNob3QudmFsKCkpWzBdOwogICAgICAgICAgICAgICAgdmFyIHZpZXdDb3VudCA9IChzbmFwc2hvdC52YWwoKVtmaWxlS2V5XS52aWV3cyB8fCAwKSArIDE7CgogICAgICAgICAgICAgICAgLy8gU2ltcGFuIGp1bWxhaCB2aWV3cyB5YW5nIHRlbGFoIGRpdGluZ2thdGthbiBrZW1iYWxpIGtlIEZpcmViYXNlIFJlYWx0aW1lIERhdGFiYXNlCiAgICAgICAgICAgICAgICBmaWxlc1JlZi5jaGlsZChmaWxlS2V5KS51cGRhdGUoewogICAgICAgICAgICAgICAgICAgIHZpZXdzOiB2aWV3Q291bnQKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIC8vIFBlcmJhcnVpIHRhbXBpbGFuIGp1bWxhaCB2aWV3cwogICAgICAgICAgICAgICAgICAgIGNlbGw0LnRleHRDb250ZW50ID0gdmlld0NvdW50OwoKICAgICAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIGhhbGFtYW4gc2FhdCBqdW1sYWggdmlld3MgdGVsYWggZGlwZXJiYXJ1aQogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihsaW5rLmhyZWYsICdfYmxhbmsnKTsgLy8gQnVrYSB0YXV0YW4gZGFsYW0gdGFiIGJhcnUKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7IC8vIFJlbG9hZCBoYWxhbWFuCiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyB2aWV3czonLCBlcnJvcik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSk7Cn0KCi8vIFRvbWJvbCBuZXh0CmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXh0UGFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIGlmIChjdXJyZW50UGFnZSAqIGZpbGVzUGVyUGFnZSA8IGZpbGVzRGF0YS5sZW5ndGgpIHsKICAgICAgICBjdXJyZW50UGFnZSsrOwogICAgICAgIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKTsKICAgICAgICBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgY3VycmVudFBhZ2UpOwogICAgfQp9KTsKCi8vIFRvbWJvbCBwcmV2CmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmV2UGFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIGlmIChjdXJyZW50UGFnZSA+IDEpIHsKICAgICAgICBjdXJyZW50UGFnZS0tOwogICAgICAgIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKTsKICAgICAgICBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgY3VycmVudFBhZ2UpOwogICAgfQp9KTsKCi8vIFRvbWJvbCBqdW1wIG5leHQKZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2p1bXBOZXh0UGFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIGN1cnJlbnRQYWdlID0gTWF0aC5jZWlsKGZpbGVzRGF0YS5sZW5ndGggLyBmaWxlc1BlclBhZ2UpOwogICAgZGlzcGxheUZpbGVzUGVyUGFnZShmaWxlc0RhdGEsIGN1cnJlbnRQYWdlKTsKICAgIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKTsKfSk7CgovLyBUb21ib2wganVtcCBwcmV2CmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqdW1wUHJldlBhZ2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICBjdXJyZW50UGFnZSA9IDE7CiAgICBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgY3VycmVudFBhZ2UpOwogICAgdXBkYXRlSnVtcFBhZ2VJbnB1dCgpOwp9KTsKCi8vIFRvbWJvbCBuZXh0IDIKZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25leHRQYWdlMicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIGlmIChjdXJyZW50UGFnZSAqIGZpbGVzUGVyUGFnZSA8IGZpbGVzRGF0YS5sZW5ndGgpIHsKICAgICAgICBjdXJyZW50UGFnZSsrOwogICAgICAgIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKTsKICAgICAgICBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgY3VycmVudFBhZ2UpOwogICAgfQp9KTsKCi8vIFRvbWJvbCBwcmV2IDIKZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZXZQYWdlMicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIGlmIChjdXJyZW50UGFnZSA+IDEpIHsKICAgICAgICBjdXJyZW50UGFnZS0tOwogICAgICAgIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKTsKICAgICAgICBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgY3VycmVudFBhZ2UpOwogICAgfQp9KTsKCi8vIFRvbWJvbCBqdW1wIG5leHQgMgpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnanVtcE5leHRQYWdlMicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIGN1cnJlbnRQYWdlID0gTWF0aC5jZWlsKGZpbGVzRGF0YS5sZW5ndGggLyBmaWxlc1BlclBhZ2UpOwogICAgZGlzcGxheUZpbGVzUGVyUGFnZShmaWxlc0RhdGEsIGN1cnJlbnRQYWdlKTsKICAgIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKTsKfSk7CgovLyBUb21ib2wganVtcCBwcmV2IDIKZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2p1bXBQcmV2UGFnZTInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICBjdXJyZW50UGFnZSA9IDE7CiAgICBkaXNwbGF5RmlsZXNQZXJQYWdlKGZpbGVzRGF0YSwgY3VycmVudFBhZ2UpOwogICAgdXBkYXRlSnVtcFBhZ2VJbnB1dCgpOwp9KTsKCi8vIEZ1bmdzaSB1bnR1ayBtZW5hbXBpbGthbiBub3RpZmlrYXNpCmZ1bmN0aW9uIHNob3dOb3RpZmljYXRpb24obWVzc2FnZSkgewogICAgLy8gQW5kYSBkYXBhdCBtZW5nZ3VuYWthbiBjYXJhIHRlcnRlbnR1IHVudHVrIG1lbmFtcGlsa2FuIG5vdGlmaWthc2ksCiAgICAvLyBtaXNhbG55YSBkZW5nYW4gbWVuZ2d1bmFrYW4gYWxlcnQgYXRhdSBtZW5hbXBpbGthbiBwZXNhbiBkaSBlbGVtZW4gSFRNTAogICAgLy8gRGkgc2luaSwgc2F5YSBha2FuIG1lbmdndW5ha2FuIGFsZXJ0IHVudHVrIHR1anVhbiBkZW1vbnN0cmFzaQogICAgYWxlcnQobWVzc2FnZSk7Cn0KCi8vIE1lbWlsaWggZWxlbWVuIGZvcm0KdmFyIHVwbG9hZEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBsb2FkLWZvcm0nKTsKCi8vIE1lbmFtYmFoa2FuIGV2ZW50IGxpc3RlbmVyIHVudHVrIGZvcm0gc3VibWl0CnVwbG9hZEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBNZW5jZWdhaCBwZW5naXJpbWFuIGZvcm0gc2VjYXJhIGRlZmF1bHQKCiAgICB2YXIgZmlsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2h0bWwtZmlsZScpLmZpbGVzWzBdOwoKICAgIC8vIEppa2EgdGlkYWsgYWRhIGZpbGUgeWFuZyBkaXBpbGloCiAgICBpZiAoIWZpbGVJbnB1dCkgewogICAgICAgIC8vIFRhbXBpbGthbiBub3RpZmlrYXNpIGtlcGFkYSBwZW5nZ3VuYQogICAgICAgIHNob3dOb3RpZmljYXRpb24oJ1BsZWFzZSBzZWxlY3QgYSBmaWxlIHRvIHVwbG9hZCEnKTsKICAgICAgICByZXR1cm47IC8vIEhlbnRpa2FuIGVrc2VrdXNpIGZ1bmdzaQogICAgfQoKICAgIHZhciBmaWxlTmFtZSA9IGZpbGVJbnB1dC5uYW1lOwogICAgdmFyIGZpbGVSZWYgPSBzdG9yYWdlUmVmLmNoaWxkKCdodG1sLWZpbGVzLycgKyBmaWxlTmFtZSk7CgogICAgLy8gVGFtcGlsa2FuIGFuaW1hc2kgbG9hZGluZwogICAgc2hvd0xvYWRpbmdBbmltYXRpb24oKTsKCiAgICAvLyBWYWxpZGFzaSBhcGFrYWggZmlsZSBzdWRhaCBhZGEKICAgIGZpbGVzUmVmLm9yZGVyQnlDaGlsZCgnbmFtZScpLmVxdWFsVG8oZmlsZU5hbWUpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24gKHNuYXBzaG90KSB7CiAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7CiAgICAgICAgICAgIC8vIFNlbWJ1bnlpa2FuIGFuaW1hc2kgbG9hZGluZyBqaWthIHRlcmphZGkga2VzYWxhaGFuCiAgICAgICAgICAgIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCk7CgogICAgICAgICAgICAvLyBUYW1waWxrYW4gbm90aWZpa2FzaSBiYWh3YSBmaWxlIHN1ZGFoIGFkYQogICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCdGaWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cy4gUGxlYXNlIHJlbmFtZSB0aGUgZmlsZSBhbmQgdHJ5IGFnYWluLicpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFVwbG9hZCBmaWxlIGtlIEZpcmViYXNlIFN0b3JhZ2UKICAgICAgICAgICAgZmlsZVJlZi5wdXQoZmlsZUlucHV0KS50aGVuKGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICAgICAgICAgICAgLy8gRGFwYXRrYW4gVVJMIGRvd25sb2FkIGZpbGUgeWFuZyBkaXVuZ2dhaAogICAgICAgICAgICAgICAgc25hcHNob3QucmVmLmdldERvd25sb2FkVVJMKCkudGhlbihmdW5jdGlvbiAoZG93bmxvYWRVUkwpIHsKICAgICAgICAgICAgICAgICAgICAvLyBTaW1wYW4gaW5mb3JtYXNpIGZpbGUga2UgRmlyZWJhc2UgUmVhbHRpbWUgRGF0YWJhc2UKICAgICAgICAgICAgICAgICAgICBmaWxlc1JlZi5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogZG93bmxvYWRVUkwsCiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGZvcm1hdEJ5dGVzKGZpbGVJbnB1dC5zaXplKSwKICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsIC8vIFNldCB2aWV3cyBhd2FsIGtlIDAKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCkgLy8gVGFuZ2dhbCB0ZXJha2hpciBrYWxpIGRpbW9kaWZpa2FzaQogICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW1idW55aWthbiBhbmltYXNpIGxvYWRpbmcgc2V0ZWxhaCBwZW5ndW5nZ2FoYW4gc2VsZXNhaQogICAgICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZ0FuaW1hdGlvbigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFtcGlsa2FuIG5vdGlmaWthc2kgcGVuZ3VuZ2dhaGFuIGJlcmhhc2lsCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oJ0ZpbGUgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5IScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgbmlsYWkgaW5wdXQgZmlsZQogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaHRtbC1maWxlJykudmFsdWUgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggaGFsYW1hbiB1bnR1ayBtZW5hbXBpbGthbiBmaWxlIHlhbmcgYmFydSBkaXVuZ2dhaAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VtYnVueWlrYW4gYW5pbWFzaSBsb2FkaW5nIGppa2EgdGVyamFkaSBrZXNhbGFoYW4KICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmdBbmltYXRpb24oKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBmaWxlIGluZm86JywgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCdFcnJvciBzYXZpbmcgZmlsZSBpbmZvLiBQbGVhc2UgdHJ5IGFnYWluLicpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgLy8gU2VtYnVueWlrYW4gYW5pbWFzaSBsb2FkaW5nIGppa2EgdGVyamFkaSBrZXNhbGFoYW4KICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCk7CgogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBsb2FkaW5nIGZpbGU6JywgZXJyb3IpOwogICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbignRXJyb3IgdXBsb2FkaW5nIGZpbGUuIFBsZWFzZSB0cnkgYWdhaW4uJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0pOwp9KTsKCi8vIEZ1bmdzaSB1bnR1ayBtZW5ndWt1ciB1a3VyYW4gZmlsZQpmdW5jdGlvbiBmb3JtYXRCeXRlcyhieXRlcywgZGVjaW1hbHMgPSAyKSB7CiAgICBpZiAoYnl0ZXMgPT09IDApIHJldHVybiAnMCBCeXRlcyc7CgogICAgY29uc3QgayA9IDEwMjQ7CiAgICBjb25zdCBkbSA9IGRlY2ltYWxzIDwgMCA/IDAgOiBkZWNpbWFsczsKICAgIGNvbnN0IHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddOwoKICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKGspKTsKCiAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9GaXhlZChkbSkpICsgJyAnICsgc2l6ZXNbaV07Cn0KCi8vIEZ1bmdzaSB1bnR1ayBtZW1wZXJiYXJ1aSBuaWxhaSBpbnB1dCBqdW1wYWdlCmZ1bmN0aW9uIHVwZGF0ZUp1bXBQYWdlSW5wdXQoKSB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnanVtcGFnZScpLnZhbHVlID0gY3VycmVudFBhZ2U7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnanVtcGFnZTInKS52YWx1ZSA9IGN1cnJlbnRQYWdlOwp9CgovLyBUYW1iYWhrYW4gZXZlbnQgbGlzdGVuZXIgdW50dWsgaW5wdXQganVtcGFnZQpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnanVtcGFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkgewogICAgdmFyIGp1bXBQYWdlSW5wdXQgPSBwYXJzZUludCh0aGlzLnZhbHVlKTsKICAgIGlmICghaXNOYU4oanVtcFBhZ2VJbnB1dCkgJiYganVtcFBhZ2VJbnB1dCA+PSAxICYmIGp1bXBQYWdlSW5wdXQgPD0gTWF0aC5jZWlsKGZpbGVzRGF0YS5sZW5ndGggLyBmaWxlc1BlclBhZ2UpKSB7CiAgICAgICAgY3VycmVudFBhZ2UgPSBqdW1wUGFnZUlucHV0OwogICAgICAgIGRpc3BsYXlGaWxlc1BlclBhZ2UoZmlsZXNEYXRhLCBjdXJyZW50UGFnZSk7CiAgICAgICAgdXBkYXRlSnVtcFBhZ2VJbnB1dCgpOyAvLyBQZXJiYXJ1aSBqdWdhIGlucHV0IHBhZGEgYmFnaWFuIGJhd2FoCiAgICB9Cn0pOwoKLy8gVGFtYmFoa2FuIGV2ZW50IGxpc3RlbmVyIHVudHVrIGlucHV0IGp1bXBhZ2UyCmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqdW1wYWdlMicpLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkgewogICAgdmFyIGp1bXBQYWdlSW5wdXQgPSBwYXJzZUludCh0aGlzLnZhbHVlKTsKICAgIGlmICghaXNOYU4oanVtcFBhZ2VJbnB1dCkgJiYganVtcFBhZ2VJbnB1dCA+PSAxICYmIGp1bXBQYWdlSW5wdXQgPD0gTWF0aC5jZWlsKGZpbGVzRGF0YS5sZW5ndGggLyBmaWxlc1BlclBhZ2UpKSB7CiAgICAgICAgY3VycmVudFBhZ2UgPSBqdW1wUGFnZUlucHV0OwogICAgICAgIGRpc3BsYXlGaWxlc1BlclBhZ2UoZmlsZXNEYXRhLCBjdXJyZW50UGFnZSk7CiAgICAgICAgdXBkYXRlSnVtcFBhZ2VJbnB1dCgpOyAvLyBQZXJiYXJ1aSBqdWdhIGlucHV0IHBhZGEgYmFnaWFuIGF0YXMKICAgIH0KfSk7CgovLyBGdW5nc2kgdW50dWsgbWVuYW1waWxrYW4gYW5pbWFzaSBsb2FkaW5nCmZ1bmN0aW9uIHNob3dMb2FkaW5nQW5pbWF0aW9uKCkgewogICAgdmFyIGxvYWRpbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmcnKTsKICAgIGlmIChsb2FkaW5nRWxlbWVudCkgewogICAgICAgIGxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgfQp9CgovLyBGdW5nc2kgdW50dWsgbWVueWVtYnVueWlrYW4gYW5pbWFzaSBsb2FkaW5nCmZ1bmN0aW9uIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCkgewogICAgdmFyIGxvYWRpbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmcnKTsKICAgIGlmIChsb2FkaW5nRWxlbWVudCkgewogICAgICAgIGxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICB9Cn0KCi8vIEZ1bmdzaSB1bnR1ayBtZW5hbXBpbGthbiBub3RpZmlrYXNpCmZ1bmN0aW9uIHNob3dOb3RpZmljYXRpb24obWVzc2FnZSkgewogICAgLy8gQW5kYSBkYXBhdCBtZW5nZ3VuYWthbiBjYXJhIHRlcnRlbnR1IHVudHVrIG1lbmFtcGlsa2FuIG5vdGlmaWthc2ksCiAgICAvLyBtaXNhbG55YSBkZW5nYW4gbWVuZ2d1bmFrYW4gYWxlcnQgYXRhdSBtZW5hbXBpbGthbiBwZXNhbiBkaSBlbGVtZW4gSFRNTAogICAgLy8gRGkgc2luaSwgc2F5YSBha2FuIG1lbmdndW5ha2FuIGFsZXJ0IHVudHVrIHR1anVhbiBkZW1vbnN0cmFzaQogICAgYWxlcnQobWVzc2FnZSk7Cn0KCi8vIEZ1bmdzaSB1bnR1ayBtZWxha3VrYW4gcGVuY2FyaWFuIGZpbGUKZnVuY3Rpb24gc2VhcmNoRmlsZXMoc2VhcmNoVGVybSkgewogICAgLy8gRmlsdGVyIGRhdGEgZmlsZSBiZXJkYXNhcmthbiBuYW1hIGZpbGUgeWFuZyBjb2NvayBkZW5nYW4gaW5wdXQgcGVuY2FyaWFuCiAgICB2YXIgZmlsdGVyZWRGaWxlc0RhdGEgPSBmaWxlc0RhdGEuZmlsdGVyKGZ1bmN0aW9uIChmaWxlKSB7CiAgICAgICAgcmV0dXJuIGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRlcm0pOwogICAgfSk7CgogICAgLy8gVGFtcGlsa2FuIGZpbGUgeWFuZyBzdWRhaCBkaWZpbHRlciBkYWxhbSB0YWJlbAogICAgZGlzcGxheUZpbGVzUGVyUGFnZShmaWx0ZXJlZEZpbGVzRGF0YSwgMSk7IC8vIE1lbmFtcGlsa2FuIGhhbGFtYW4gcGVydGFtYSBkYXJpIGhhc2lsIHBlbmNhcmlhbgogICAgY3VycmVudFBhZ2UgPSAxOyAvLyBTZXQgaGFsYW1hbiBzYWF0IGluaSBrZW1iYWxpIGtlIGhhbGFtYW4gcGVydGFtYQogICAgdXBkYXRlSnVtcFBhZ2VJbnB1dCgpOyAvLyBQZXJiYXJ1aSBpbnB1dCBqdW1wYWdlCgogICAgLy8gVGFtcGlsa2FuIGtldGVyYW5nYW4gcGVuY2FyaWFuCiAgICBzaG93U2VhcmNoSW5mbyhzZWFyY2hUZXJtKTsKfQoKLy8gRnVuZ3NpIHVudHVrIG1lbmFtcGlsa2FuIGtldGVyYW5nYW4gcGVuY2FyaWFuIGRlbmdhbiBkdXJhc2kKZnVuY3Rpb24gc2hvd1NlYXJjaEluZm8oc2VhcmNoVGVybSkgewogICAgdmFyIHNlYXJjaEluZm9FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaC1pbmZvJyk7CiAgICBzZWFyY2hJbmZvRWxlbWVudC50ZXh0Q29udGVudCA9ICdTZWFyY2ggZm9yOiAnICsgc2VhcmNoVGVybTsKCiAgICAvLyBBdHVyIGR1cmFzaSB1bnR1ayBtZW5hbXBpbGthbiBrZXRlcmFuZ2FuIHBlbmNhcmlhbgogICAgdmFyIGR1cmF0aW9uID0gMzAwMDsgLy8gRHVyYXNpIGRhbGFtIG1pbGlkZXRpayAobWlzYWxueWEsIDMwMDBtcyA9IDMgZGV0aWspCgogICAgLy8gU2V0IHRpbWVvdXQgdW50dWsgbWVuZ2hhcHVzIGtldGVyYW5nYW4gcGVuY2FyaWFuIHNldGVsYWggZHVyYXNpIHRlcnRlbnR1CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBzZWFyY2hJbmZvRWxlbWVudC50ZXh0Q29udGVudCA9ICcnOyAvLyBIYXB1cyBrZXRlcmFuZ2FuIHBlbmNhcmlhbiBzZXRlbGFoIGR1cmFzaSB0ZXJ0ZW50dQogICAgfSwgZHVyYXRpb24pOwp9CgovLyBUYW1iYWhrYW4gZXZlbnQgbGlzdGVuZXIgdW50dWsgZm9ybSBwZW5jYXJpYW4KZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkanMnKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIE1lbmNlZ2FoIHBlbmdpcmltYW4gZm9ybSBzZWNhcmEgZGVmYXVsdAoKICAgIC8vIERhcGF0a2FuIG5pbGFpIGlucHV0IHBlbmNhcmlhbgogICAgdmFyIHNlYXJjaFRlcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRhbmpzJykudmFsdWUudG9Mb3dlckNhc2UoKTsKCiAgICAvLyBDYXJpIGZpbGUgYmVyZGFzYXJrYW4ga2F0YSBrdW5jaQogICAgc2VhcmNoRmlsZXMoc2VhcmNoVGVybSk7CgogICAgLy8gUmVzZXQgbmlsYWkgaW5wdXQgcGVuY2FyaWFuCiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRhbmpzJykudmFsdWUgPSAnJzsKCiAgICAvLyBDbG9zZSBmb3JtIHBlbmNhcmlhbgogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb3NlenonKS5jbGljaygpOwp9KTsKCi8vIEZ1bmdzaSB1bnR1ayBtZW5hbWJhaGthbiBldmVudCBsaXN0ZW5lciB1bnR1ayB0b21ib2wgc2VhcmNoCmZ1bmN0aW9uIGFkZFNlYXJjaEJ1dHRvbkxpc3RlbmVyKCkgewogICAgY29uc3Qgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZva3VzZWFyY2gnKTsKICAgIGlmIChzZWFyY2hCdXR0b24pIHsKICAgICAgICBzZWFyY2hCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXRzZWFyY2gnKS5mb2N1cygpOwogICAgICAgICAgICB9LCA1MCk7CiAgICAgICAgfTsKICAgIH0KfQoKLy8gUGFuZ2dpbCBmdW5nc2kgdW50dWsgbWVuYW1iYWhrYW4gZXZlbnQgbGlzdGVuZXIgcGFkYSB0b21ib2wgc2VhcmNoCmFkZFNlYXJjaEJ1dHRvbkxpc3RlbmVyKCk7Cgpjb25zdCB0YXJnZXREb21haW4gPSAnaGF4b3J1cGxvYWRlci5ibG9nc3BvdC5jb20nOwpmdW5jdGlvbiBjcmVhdGVBbGVydEJveChtZXNzYWdlKSB7CmNvbnN0IGFsZXJ0Qm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CmFsZXJ0Qm94LnNldEF0dHJpYnV0ZSgnaWQnLCAnYWxlcnRCb3gnKTsKYWxlcnRCb3guc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwphbGVydEJveC5zdHlsZS50b3AgPSAnNTBweCc7CmFsZXJ0Qm94LnN0eWxlLmxlZnQgPSAnNTAlJzsKYWxlcnRCb3guc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLTUwJSknOwphbGVydEJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2YyZjJmMic7CmFsZXJ0Qm94LnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgI2RkZCc7CmFsZXJ0Qm94LnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1cHgnOwphbGVydEJveC5zdHlsZS5wYWRkaW5nID0gJzIwcHgnOwphbGVydEJveC5zdHlsZS5ib3hTaGFkb3cgPSAnMCAycHggNHB4IHJnYmEoMCwwLDAsMC4yKSc7CmFsZXJ0Qm94LnN0eWxlLnpJbmRleCA9ICc5OTk5JzsKYWxlcnRCb3guaW5uZXJIVE1MID0gYDxzdHJvbmc+UEVSSU5HQVRBTiE8L3N0cm9uZz4gJHttZXNzYWdlfWA7CmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWxlcnRCb3gpOwoKc2V0VGltZW91dCgoKSA9PiB7CmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYWxlcnRCb3gpOwp3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdodHRwczovL2hheG9ydXBsb2FkZXIuYmxvZ3Nwb3QuY29tJzsKfSwgMTAwMDApOwp9Cgpjb25zdCBjdXJyZW50RG9tYWluID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lOwoKaWYgKGN1cnJlbnREb21haW4gIT09IHRhcmdldERvbWFpbikgewpjcmVhdGVBbGVydEJveCgnU3VtYmVyIERheWEgSW5pIERpYW1hbmthbiBPbGVoIEFobGkgS2VhbWFuYW4uIERpbGFyYW5nIE1lbmdha3NlcyBUYW5wYSBJemluLicpOwp9';
function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}
runDecryptedCode(encryptedCode);
